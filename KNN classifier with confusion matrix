import numpy as np
import pandas as pd
from sklearn.neighbors import KNeighborsClassifier
from sklearn import model_selection
from sklearn.metrics import confusion_matrix
from sklearn.decomposition import PCA
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from sklearn import preprocessing
from sklearn.model_selection import train_test_split
from sklearn.model_selection import cross_val_score

#import features and labels
x1=pd.read_csv(r'D:\Download\FYP\python\0data\x1.csv',index_col=0).iloc[:,:5]    
x=x1
y=pd.read_csv(r'D:\Download\FYP\python\0data\y.csv',index_col=0)
y=np.ravel(y)
x_train, x_test, y_train, y_test= train_test_split(x, y, test_size=0.3, shuffle = True, stratify=y)

#standardization 
sc_X = preprocessing.StandardScaler() 
x_train = sc_X.fit_transform(x_train)
x_test = sc_X.transform(x_test)

#classifier
q=7   
knn_clf = KNeighborsClassifier(n_neighbors=q,weights='distance',algorithm='auto',p=2)#algorithm='auto'
knn_clf.fit(x_train, y_train) 
train_score = knn_clf.score(x_train, y_train) 
test_score = knn_clf.score(x_test1, y_test1)
#print("K=",q)
print("test score=", test_score)

#confusion matrix
y_pred = knn_clf.fit(x_train, y_train).predict(x_test)
confusion_matrix=confusion_matrix(y_test, y_pred, labels=None, sample_weight=None)
print(confusion_matrix)

#the matrix
import matplotlib.pyplot as plt
labels =  ['B1-80', 'B3-80', 'B4-80','BK-PaperShuff','CF-Amy','CM-Was','Macbook_KB','TIC-fing','WA-Soft-KB']
tick_marks = np.array(range(len(labels))) + 0.5
#define the detail for the matrix
def plot_confusion_matrix(cm, title='Confusion Matrix', cmap=plt.cm.binary):
    plt.imshow(cm, interpolation='nearest', cmap=plt.cm.Blues)#color for the map
    plt.title(title)#title
    plt.colorbar()
    xlocations = np.array(range(len(labels)))
    plt.xticks(xlocations, labels, rotation=45)
    plt.yticks(xlocations, labels)
    plt.ylabel('True label')#xlabel and ylabel
    plt.xlabel('Predicted label')
#draw the matrix 
y_true=y_test
cm = confusion_matrix
np.set_printoptions(precision=2)# precision
cm_normalized = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]#normalized the confusion matrix
plt.figure(figsize=(12, 8), dpi=120)
ind_array = np.arange(len(labels))
x, y = np.meshgrid(ind_array, ind_array)
for x_val, y_val in zip(x.flatten(), y.flatten()):
    c = cm_normalized[y_val][x_val]
    if c > 0.01:   
        plt.text(x_val, y_val, "%0.2f" % (c,), fontsize=12, va='center', ha='center',color="white" if c > 0.5 else "black")#color for the values
    #if c <0.01, do not write the value
plt.gca().set_xticks(tick_marks, minor=True)#xticks and yticks（label scale）
plt.gca().set_yticks(tick_marks, minor=True)
plt.gca().xaxis.set_ticks_position('none')#set_ticks_position('bottom') 
plt.gca().yaxis.set_ticks_position('none')
plt.grid(True, which='minor', linestyle='-')
plt.gcf().subplots_adjust(bottom=0.3)
plot_confusion_matrix(cm_normalized, title='Normalized confusion matrix for KNN with 4 features')#title
plt.show()
