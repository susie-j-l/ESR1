import numpy as np
import pandas as pd
import scipy.io.wavfile as wav
import math
from python_speech_features import mfcc
from python_speech_features import delta
from python_speech_features import logfbank
import os 
from sklearn.cluster import KMeans  
from sklearn import preprocessing
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler
import librosa
from os import listdir
import math 
filepath=r"D:\Download\FYP\SSR_Zheng Ning\SSR_Zheng Ning"
records=[]
y1 = pd.DataFrame()    
x1 = pd.DataFrame()
x2 = pd.DataFrame()
x3 = pd.DataFrame() 
x4 = pd.DataFrame()
length=882
overlap=661

def enframe(wavData, frameSize, overlap):
#    coeff = 0.97 # 预加重系数
    wlen = len(wavData)
    step = frameSize - overlap
    frameNum:int =  math.ceil(wlen / step)
    frameData = np.zeros((frameSize, frameNum))
    #hamwin = np.hamming(frameSize)
    #new_wave_data=[]
    for i in range(frameNum):  
        #sum = 0
        singleFrame = wavData[np.arange(i * step, min(i * step + frameSize, wlen))]
        #singleFrame = np.append(singleFrame[0], singleFrame[:-1] - coeff * singleFrame[1:]) # 预加重
        frameData[:len(singleFrame), i] = singleFrame
        #frameData[:, i] = hamwin * frameData[:, i] # 加窗
    return frameData

def sgn(data):#zero crossing dicision function
     if data >= 0 :
         return 1 
     else :
         return 0
#   calculate the energy and zcr
def cal(X) :
    energy = []
    zeroCrossingRate = []
    e_sum=np.sum(X[0,:]**2)#calculate the energy in 1st frame (1st row of data X)
    energy.append(int(e_sum))  
    num=0
    for j in range(X.shape[1]) :
        num = num+np.abs(sgn(X[0,j]) - sgn(X[0,j-1]))#calculate the ZCR in 1st frame
        #(sgn(X[0,j]) - sgn(X[0,j-1])):when the sign of two neighboring number is same, the value for the function is 0, otherwise the value is 1.
    zeroCrossingRate.append(num)
    
#    count=0    
    for i in range(len(X)-1) :
        e_sum = 0
        e_sum=np.sum(X[i+1,:]**2)
        energy.append(int(e_sum))  
        num=0
        for j in range(X.shape[1]) :
            num = num+np.abs(sgn(X[i+1,j]) - sgn(X[i+1,j-1]))  
        zeroCrossingRate.append(num)
    return zeroCrossingRate,energy
#extract the useful frames and features
def usef(X):
    mfcc_=mfcc(X.flatten(),samplerate=44100,numcep=26,winfunc=np.hamming,winlen=length/44100,winstep=length/44100,nfft=882,preemph=0.97)#winlen=0.025, winstep=0.01,numcep=13,samplerate=16000
    d_mfcc_feat = delta(mfcc_, 2)#[:,:5]
    dd_mfcc_feat = delta(d_mfcc_feat,2)#[:,:5]
    fbank_feat = logfbank(X.flatten(),samplerate=44100,winlen=length/44100,winstep=length/44100,nfilt=26,nfft=882,lowfreq=0,highfreq=None,preemph=0.97)
    C = X[0,:]#first row
##    K = X[0,:]
    count=0  
    ucont=0
    mfcc1=mfcc_[0]#first row
    d_mfcc_feat1=d_mfcc_feat[0]
    dd_mfcc_feat1=dd_mfcc_feat[0]
    fbank_feat1=fbank_feat[0]
    energy1=10*math.log(Y[1][0],10)
    for i in range(len(X)-1) :
        if x[i+1,1] > x[i+1,0] * m + b:#from second row 
            count=count+1
#            mfcc0=mfcc_[i+1]
            mfcc1=np.concatenate((mfcc1, mfcc_[i+1]), axis=0)
#            d_mfcc_feat0=d_mfcc_feat[i+1]
            d_mfcc_feat1=np.concatenate((d_mfcc_feat1, d_mfcc_feat[i+1]), axis=0)
#            dd_mfcc_feat0=dd_mfcc_feat[i+1]
            dd_mfcc_feat1=np.concatenate((dd_mfcc_feat1, dd_mfcc_feat[i+1]), axis=0)
#            fbank_feat0=fbank_feat[i+1]
            fbank_feat1=np.concatenate((fbank_feat1, fbank_feat[i+1]), axis=0)
            energy1=np.hstack((energy1,10*math.log(Y[1][i+1],10)))
##            K= np.concatenate((K, X[i+1,:]), axis=0)
            C=np.concatenate((C, X[i+1,:]), axis=0)
        else:
            ucont=ucont+1
            q = np.zeros(len(X[i+1,:]))
            C=np.concatenate((C, q), axis=0)
    print(count)#the number of frames are useful(voiced/above the threshold)
    print(ucont)
    return C,mfcc1[26:],d_mfcc_feat1[26:],dd_mfcc_feat1[26:],fbank_feat1[26:],energy1[1:],count#,energy1[1:],count

#main function
records = [f for f in listdir(filepath) if(f.find('.wav') != -1)] 
#overlap=132
newdir = os.path.join(filepath, records[0])
fs, signal = wav.read(newdir)# Open a WAV file.Return the sample rate (in samples/sec) and data from a WAV file.
#signal=np.true_divide(signal,max(signal))
X=enframe(signal, length,overlap).T#[:3000]#转置的原因是分帧函数enframe的输出矩阵是帧数*帧长 35080*256
Y=cal(X)#计算出zcr&energy
x = np.array(list(zip(Y[0], Y[1]))).reshape(len(Y[0]), 2)
q=[records[0][:-4]]  
#x = np.array(list(zip(zeroCrossingRate, energy))).reshape(len(zeroCrossingRate), 2)
kmeans=KMeans(n_clusters=2,n_init=10)   #n_clusters:number of cluster  
kmeans.fit(x)  
y_kmeans = kmeans.predict(x)
centers = kmeans.cluster_centers_
midpoint = np.zeros(2)
midpoint[0] = (centers[0, 0] + centers[1, 0])/2 #midpoint x
midpoint[1] = (centers[0, 1] + centers[1, 1])/2 #midpoint y
# get slope (m) and y zero crossing point (b)
m = -(centers[1, 0] - centers[0, 0])/(centers[1, 1] - centers[0, 1]) #slope=-x/y 垂直于中心的的直线
b = midpoint[1] - m*midpoint[0] #y crosspoint
u=usef(X)
#    signal = signal.flatten()[:8551936]
#    signal=signal.reshape(1,8551936)   
count1=u[6]#改
feature1=u[1].reshape(count1,26)#
n=len(feature1)
c=np.full([n,1],q);#标签
x1 = pd.DataFrame(feature1, columns=None, index=c)

feature2=u[2].reshape(count1,26)#
x2 = pd.DataFrame(feature2, columns=None, index=c)
    
feature3=u[3].reshape(count1,26)#
x3 = pd.DataFrame(feature3, columns=None, index=c)
    
feature4=u[4].reshape(count1,26)#
x4 = pd.DataFrame(feature4, columns=None, index=c)

feature5=u[5]#
x5 = pd.DataFrame(feature5, columns=None, index=c)

y1 = pd.DataFrame(c,columns=None,index=c)     
i=1  
for s in records[1:]:   
#    overlap=110
    i=i+1
    newdir = os.path.join(filepath, s)
    fs, signal = wav.read(newdir)# Open a WAV file.Return the sample rate (in samples/sec) and data from a WAV file.
#    signal=signal/np.max(signal)
#    signal=np.true_divide(signal,max(signal))
#    if i==5 or i==6 or i==8 or i==9 :
#        overlap=110    
#    else if i==7 or i:
#        overlap==55
#    print(overlap)
    
    X=enframe(signal, length,overlap).T#[:3000]#转置的原因是分帧函数enframe的输出矩阵是帧数*帧长 35080*256
    #frameNum =X.shape[0] #返回矩阵行数18，获取帧数
    Y=cal(X)#计算出zcr&energy
    #energy=np.true_divide(energy,441)
    #zeroCrossingRate=np.true_divide(zeroCrossingRate,220)
    x = np.array(list(zip(Y[0], Y[1]))).reshape(len(Y[0]), 2)
#    x = np.array(list(zip(zeroCrossingRate, energy))).reshape(len(zeroCrossingRate), 2)
    
    kmeans=KMeans(n_clusters=2,n_init=10)   #n_clusters:number of cluster  
    kmeans.fit(x)  
    y_kmeans = kmeans.predict(x)
    centers = kmeans.cluster_centers_
    midpoint = np.zeros(2)
    midpoint[0] = (centers[0, 0] + centers[1, 0])/2 #midpoint x
    midpoint[1] = (centers[0, 1] + centers[1, 1])/2 #midpoint y
    # get slope (m) and y zero crossing point (b)
    m = -(centers[1, 0] - centers[0, 0])/(centers[1, 1] - centers[0, 1]) #slope=-x/y 垂直于中心的的直线
    b = midpoint[1] - m*midpoint[0] #y crosspoint
#    if  i==4 or i==9:
#        b=b*2#for BK_PaperShuff
#        u=usef(X)
#        print(b)
#        
#    else:
#        b=b
#        u=usef(X)
    u=usef(X)
#    print(b)
#    print(m)
    count1=u[6]
    feature1=u[1].reshape(count1,26)#
    n=len(feature1)
    c=np.full([n,1],[s[:-4]]);#标签
           
    x11 = pd.DataFrame(feature1, columns=None, index=c)
    frames1 = [x1, x11]
    x1 = pd.concat(frames1)
    
    feature2=u[2].reshape(count1,26)#
#        feature2=np.hstack((feature1, feature2))
    x22 = pd.DataFrame(feature2, columns=None, index=c)
    frames1 = [x2, x22]
    x2 = pd.concat(frames1)
    
    feature3=u[3].reshape(count1,26)#
    x33 = pd.DataFrame(feature3, columns=None, index=c)
    frames1 = [x3, x33]
    x3 = pd.concat(frames1)
    
    feature4=u[4].reshape(count1,26)#
    x44 = pd.DataFrame(feature4, columns=None, index=c)
    frames1 = [x4, x44]
    x4 = pd.concat(frames1)
    
    feature5=u[5]#
    x55 = pd.DataFrame(feature5, columns=None, index=c)
    frames1 = [x5, x55]
    x5 = pd.concat(frames1)
 
    y = pd.DataFrame(c, columns=None, index=c)#label
    frames2 = [y1, y]
    y1 = pd.concat(frames2) 

x1.to_csv('x1.csv')
x2.to_csv('x2.csv')
x3.to_csv('x3.csv')
x4.to_csv('x4.csv')
x5.to_csv('x5.csv')
y1.to_csv('y.csv')  
