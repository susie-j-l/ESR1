import numpy as np 
import scipy.io.wavfile as wav
import math
from python_speech_features import mfcc
from python_speech_features import delta
from python_speech_features import logfbank
import pandas as pd
import os 
from sklearn.cluster import KMeans  
from sklearn import preprocessing
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler
import librosa

energy = []
zeroCrossingRate = []
def enframe(wavData, frameSize, overlap):
#    coeff = 0.97 # 预加重系数
    wlen = len(wavData)
    step = frameSize - overlap
    frameNum:int =  math.ceil(wlen / step)
    frameData = np.zeros((frameSize, frameNum))
    #hamwin = np.hamming(frameSize)
    #new_wave_data=[]
    for i in range(frameNum):  
        #sum = 0
        singleFrame = wavData[np.arange(i * step, min(i * step + frameSize, wlen))]
        #singleFrame = np.append(singleFrame[0], singleFrame[:-1] - coeff * singleFrame[1:]) # 预加重
        frameData[:len(singleFrame), i] = singleFrame
        #frameData[:, i] = hamwin * frameData[:, i] # 加窗
    return frameData

def sgn(data):#zero crossing dicision function
     if data >= 0 :
         return 1 
     else :
         return 0
#   calculate the energy and zcr
def cal(X) :
    e_sum=np.sum(X[0,:]**2)#calculate the energy in 1st frame (1st row of data X)
    energy.append(int(e_sum))  
    num=0
    for j in range(X.shape[1]) :
        num = num+np.abs(sgn(X[0,j]) - sgn(X[0,j-1]))#calculate the ZCR in 1st frame
        #(sgn(X[0,j]) - sgn(X[0,j-1])):when the sign of two neighboring number is same, the value for the function is 0, otherwise the value is 1.
    zeroCrossingRate.append(num)
    
#    count=0    
    for i in range(len(X)-1) :
        e_sum = 0
        e_sum=np.sum(X[i+1,:]**2)
        energy.append(int(e_sum))  
        num=0
        for j in range(X.shape[1]) :
            num = num+np.abs(sgn(X[i+1,j]) - sgn(X[i+1,j-1]))  
        zeroCrossingRate.append(num)
#extract the useful frames and features
def usef(X):
#    mfcc_=mfcc(X.flatten(),samplerate=44100,numcep=13,winfunc=np.hamming,winlen=length/44100,winstep=length/44100,nfft=512,preemph=0.97)#winlen=0.025, winstep=0.01,numcep=13,samplerate=16000
#    d_mfcc_feat = delta(mfcc_, 2)#[:,:5]
#    dd_mfcc_feat = delta(d_mfcc_feat,2)#[:,:5]
#    fbank_feat = logfbank(X.flatten(),samplerate=44100,winlen=length/44100,winstep=length/44100,nfilt=13,nfft=512,lowfreq=0,highfreq=None,preemph=0.97)
    C = X[0,:]#first row
##    K = X[0,:]
    count=0  
    ucont=0
#    mfcc1=mfcc_[0]#first row
#    d_mfcc_feat1=d_mfcc_feat[0]
#    dd_mfcc_feat1=dd_mfcc_feat[0]
#    fbank_feat1=fbank_feat[0]
    for i in range(len(X)-1) :
        if x[i+1,1] > x[i+1,0] * m + b:#from second row 
            count=count+1
#            mfcc0=mfcc_[i+1]
#            mfcc1=np.concatenate((mfcc1, mfcc0), axis=0)
#            d_mfcc_feat0=d_mfcc_feat[i+1]
#            d_mfcc_feat1=np.concatenate((d_mfcc_feat1, d_mfcc_feat0), axis=0)
#            dd_mfcc_feat0=dd_mfcc_feat[i+1]
#            dd_mfcc_feat1=np.concatenate((dd_mfcc_feat1, dd_mfcc_feat0), axis=0)
#            fbank_feat0=fbank_feat[i+1]
#            fbank_feat1=np.concatenate((fbank_feat1, fbank_feat0), axis=0)
##            K= np.concatenate((K, X[i+1,:]), axis=0)
            C=np.concatenate((C, X[i+1,:]), axis=0)
        else:
            ucont=ucont+1
            q = np.zeros(len(X[i+1,:]))
            C=np.concatenate((C, q), axis=0)
    print(count)#the number of frames are useful(voiced/above the threshold)
    print(ucont)
    return C#,mfcc1,d_mfcc_feat1,dd_mfcc_feat1,fbank_feat1,count

filepath = r"D:\Download\FYP\SSR_Zheng Ning\SSR_Zheng Ning\B1-80.wav"
fs, signal = wav.read(filepath)# Open a WAV file.Return the sample rate (in samples/sec) and data from a WAV file.
length=441
overlap=220
#overlap=132
#signal=signal/np.max(signal)
#signal=np.true_divide(signal,max(signal))
X=enframe(signal, length,overlap).T#[:10000] #转置的原因是分帧函数enframe的输出矩阵是帧数*帧长 35080*256
#frameNum =X.shape[0] #返回矩阵行数18，获取帧数
Y=cal(X)
#energy=np.true_divide(energy,441)
#zeroCrossingRate=np.true_divide(zeroCrossingRate,220)
x = np.array(list(zip(zeroCrossingRate, energy))).reshape(len(zeroCrossingRate), 2)

kmeans=KMeans(n_clusters=2,n_init=10)   #n_clusters:number of cluster  
kmeans.fit(x)  
y_kmeans = kmeans.predict(x)
#11111
centers = kmeans.cluster_centers_
print(centers)
#calculate midpoint and bissectrice slope to get the line
midpoint = np.zeros(2)
midpoint[0] = (centers[0, 0] + centers[1, 0])/2 #midpoint x
midpoint[1] = (centers[0, 1] + centers[1, 1])/2 #midpoint y
# get slope (m) and y zero crossing point (b)
m = -(centers[1, 0] - centers[0, 0])/(centers[1, 1] - centers[0, 1]) #slope=-x/y 垂直于中心的的直线
b = midpoint[1] - m*midpoint[0] #y crosspoint
print('m : ' + str(m))
print('b : ' + str(b))
#b=b*2
u=usef(X)
# =============================================================================
colors = ["r",'b','g','c','m','y','k','#DAF7A6','#7433FF','#FF33CA']
fig=plt.figure()
plt.scatter(x[:, 0], x[:, 1], c=y_kmeans, cmap='viridis')
plt.scatter(centers[:, 0], centers[:, 1], c='black', s=200)
plt.plot([0, np.max(x[:, 0])], [b,m*np.max(x[:, 0]) + b], 'k-', color = 'r')
# plt.ylim(-0.2, 1.2)
plt.xlabel("ZCR")
plt.ylabel("Energy")
plt.title(" Short-Time Energy vs ZCR scatter plot for BK-PaperShuff")#, voiced (purple) and unvoiced (yellow) classes with centroids

fig=plt.figure()
plt.plot(u)
plt.xticks(0, 500)
plt.xlabel('Sample')
plt.ylabel('Amplitude')
plt.title('Filtered graph for BK-PaperShuff')
plt.show()

fig=plt.figure()
plt.plot(X.flatten())
plt.xlabel('Sample')
plt.ylabel('Amplitude')
plt.title('Original Graph for BK-PaperShuff')
plt.show()

# =============================================================================
#count1=u[5]+1
#feature1=u[1].reshape(count1,13)#
#n=len(feature1)
##
#c=np.full([n,1],2);#标签
#M = pd.DataFrame(feature1, columns=None, index=c)
##
#M.to_csv('21.csv')#名字
#
#feature2=u[2].reshape(count1,13)#
#feature2=np.hstack((feature1, feature2))
#N = pd.DataFrame(feature2, columns=None, index=c)
#N.to_csv('22.csv')#
#
#feature3=u[3].reshape(count1,13)#
#feature3=np.hstack((feature2, feature3))  
#N = pd.DataFrame(feature3, columns=None, index=c)
#N.to_csv('23.csv')#
#
#feature4=u[4].reshape(count1,13)#
#feature4=np.hstack((feature3, feature4))
#N = pd.DataFrame(feature4, columns=None, index=c)
#N.to_csv('24.csv')#
##
#filepath = r"D:\Download\FYP\SSR_Zheng Ning\SSR_Zheng Ning\WA-Soft-KB.wav"#
#(filepath,tempfilename) = os.path.split(filepath)
#(filename,extension) = os.path.splitext(tempfilename)
#label = filename
#label=np.full([n,1],label);
#L = pd.DataFrame(label, columns=None, index=c)
##
#L.to_csv('label2.csv')#920-3700.wav"#标签
